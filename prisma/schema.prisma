generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Tipo_Perfil {
  id_Tipo_Perfil Int    @id @default(autoincrement())
  descripcion         String @unique

  Perfil_Usuario Perfil_Usuario[]
  Perfil_Miembro Perfil_Miembro[]
}

model Perfil_Usuario {
  id_Perfil    Int    @id @default(autoincrement())
  username     String
  tipoPerfilId Int
  adaptado_Id  Int

  tipoPerfil Tipo_Perfil @relation(fields: [tipoPerfilId], references: [id_Tipo_Perfil], onDelete: Cascade)
  usuario    Usuario     @relation(fields: [adaptado_Id], references: [id_Usuario], onDelete: Cascade)

  @@index([adaptado_Id], map: "Perfil_Usuario_usuarioId_fkey")
  @@index([tipoPerfilId], map: "Perfil_Usuario_tipoPerfilId_fkey")
}

model Usuario {
  id_Usuario Int    @id @default(autoincrement())
  nombre     String
  email      String @unique
  telefono   String

  Perfil_Usuario     Perfil_Usuario[]
  Miembro_De_Junta   Miembro_De_Junta[]
  miembrosConvocados miembrosConvocados[]
  Punto              Punto[]              @relation("UsuarioExpositor")
}

model AgendaStatus {
  id_Estado Int      @id @default(autoincrement())
  nombre    String   @unique
  Agenda    Agenda[]
}

model Agenda {
  id_Agenda          Int                  @id @default(autoincrement())
  numero             String
  tipo               String
  fechaHora          DateTime
  fechaFin           DateTime?
  lugar              String
  estadoId           Int                  @default(1) // Valor por defecto estado draft
  estado             AgendaStatus         @relation(fields: [estadoId], references: [id_Estado])
  miembrosConvocados miembrosConvocados[]
  puntos             Punto[]
}

model miembrosConvocados {
  id_miembrosConvocados Int @id @default(autoincrement())
  id_Agenda             Int
  id_Convocado          Int

  Agenda    Agenda  @relation(fields: [id_Agenda], references: [id_Agenda], onDelete: Cascade)
  Convocado Usuario @relation(fields: [id_Convocado], references: [id_Usuario], onDelete: Cascade)
}

model Punto {
  id_Punto    Int     @id @default(autoincrement())
  agendaId    Int
  numeracion  Int
  expositorId Int
  tipo        String
  duracionMin Int
  enunciado   String  @db.LongText
  contenido   String  @db.LongText


  agenda      Agenda  @relation(fields: [agendaId], references: [id_Agenda], onDelete: Cascade)
  expositor   Usuario @relation("UsuarioExpositor", fields: [expositorId], references: [id_Usuario], onDelete: Cascade)
  archivos Archivo[]
  Votacion Votacion?

  @@index([agendaId], map: "Punto_agendaId_fkey")
  @@index([expositorId], map: "Punto_expositorId_fkey")
}

model Archivo {
  id_Archivo Int    @id @default(autoincrement())
  puntoId    Int
  nombre     String
  url        String

  punto Punto @relation(fields: [puntoId], references: [id_Punto], onDelete: Cascade)

  @@index([puntoId], map: "Archivo_puntoId_fkey")
}

model Votacion {
  id_Punto         Int    @id

  votos_a_Favor    Int
  votos_en_Contra  Int
  votos_Abstencion Int
  acuerdo          String @db.LongText

  punto            Punto  @relation(fields: [id_Punto], references: [id_Punto], onDelete: Cascade)
}

model Perfil_Miembro {
  id_Perfil    Int    @id @default(autoincrement())
  adaptado_Id  Int
  tipoPerfilId Int
  username     String

  miembro    Miembro_De_Junta @relation(fields: [adaptado_Id], references: [id_Miembro_De_Junta], onDelete: Cascade)
  tipoPerfil Tipo_Perfil      @relation(fields: [tipoPerfilId], references: [id_Tipo_Perfil], onDelete: Cascade)

  @@index([adaptado_Id], map: "Perfil_Miembro_miembroId_fkey")
  @@index([tipoPerfilId], map: "Perfil_Miembro_tipoPerfilId_fkey")
}

model Miembro_De_Junta {
  id_Miembro_De_Junta Int              @id @default(autoincrement())
  usuario_id          Int
  junta_id            Int
  cargo               String
  fecha_inicio        DateTime
  fecha_fin           DateTime?

  usuario             Usuario          @relation(fields: [usuario_id], references: [id_Usuario], onDelete: Cascade)
  junta               Junta            @relation(fields: [junta_id], references: [id_Junta], onDelete: Cascade)
  Perfil_Miembro      Perfil_Miembro[]

  @@index([junta_id], map: "Miembro_De_Junta_junta_id_fkey")
  @@index([usuario_id], map: "Miembro_De_Junta_usuario_id_fkey")
}

model Junta {
  id_Junta          Int                @id @default(autoincrement())
  nombre            String

  Miembros_De_Junta Miembro_De_Junta[]
}
